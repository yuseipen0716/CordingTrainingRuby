# 配列aから要素a[idx]を削除するメソッドaryRmvを作成せよ。 aryRmv(a, idx)
# 削除はa[idx]より後ろの全要素を一つ前方にずらすことによって行うこと。なお、移動されずに余ってしまう末尾要素a[a.length - 1]の値は変更しなくて良い。
# 例：配列aの要素が{1, 3, 4, 7, 9, 11}のときにaryRmv(a, 2)と呼び出した後の配列aの要素は{1, 3, 7, 9, 11, 11}となる。

# 実行例
# 要素数 : 6
# a[0] : 1
# a[1] : 3
# a[2] : 4
# a[3] : 7
# a[4] : 9
# a[5] : 11
# 削除する要素のインデックス : 2
# a[0] : 1
# a[1] : 3
# a[2] : 7
# a[3] : 9
# a[4] : 11
# a[5] : 11

# ======処理の流れ=======
# 取得した削除する要素のインデックスから配列の最後の要素の一つ前の要素までの範囲で繰り返し処理
# 処理の内容としてはi番目の要素にその次のi+1番目の要素を再代入するというもの
# こうすれば、a[a.length-1]の要素は変更せず、a[idx]より後ろの要素を一つ前方にずらすことができる。
def aryRmv(a, idx)
    # 取得した削除する要素のインデックスから配列の最後の要素の一つ前の要素までの範囲で繰り返し
    (idx..a.size-1-1).each do |i|
        a[i] = a[i+1]
    end
    # 要素削除後の配列の要素を順番に表示
    (0..a.size-1).each do |j|
        puts "a[#{j}] : #{a[j]}"
    end
end

print "要素数 : "
element = gets.chomp.to_i

a = []
(0..element-1).each do |i|
    print "a[#{i}] : "
    a << gets.chomp.to_i
end

print "削除する要素のインデックス : "
remove_index = gets.chomp.to_i

aryRmv(a, remove_index)

